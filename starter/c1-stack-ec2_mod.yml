Description:  This template deploys ec2 instances for the project starter

Parameters:
  SubnetId1:
    Type: String
  SubnetId2:
    Type: String
  VpcId:
    Type: String
  AmiId:
    Type: String
    Default: "ami-09397c199cf1dfdab"
  DbHost:
    Type: String
  DbUser:
    Type: String
    Default: "admin"
  DbPassword:
    Type: String
    Default: "jerky1999"


Resources:
  WebAppSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: WebAppSG
      GroupDescription: "Security group for this app"
      SecurityGroupEgress:
      - IpProtocol: -1
        CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 5000
        ToPort: 5000
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      VpcId: !Ref VpcId

  AppInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref AmiId
      InstanceType: t3.micro
      KeyName: mehdi12016
      SecurityGroupIds:
      - !GetAtt WebAppSG.GroupId
      SubnetId: !Ref SubnetId1
      Tags:
      - Key: "Name"
        Value: "Web Service Instance - C1"
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          echo "Environment=DB_HOST="${DbHost} | sudo tee -a /lib/systemd/system/flask.service
          echo "Environment=DB_USER="${DbUser} | sudo tee -a /lib/systemd/system/flask.service
          echo "Environment=DB_PASSWORD="${DbPassword} | sudo tee -a /lib/systemd/system/flask.service
          systemctl daemon-reload
          sleep 30
          service flask restart

    # Additional code for Exercise 3:
    AppInstance2:
      Type: AWS::EC2::Instance
      Properties:
        ImageId: !Ref AmiId
        InstanceType: t3.micro
        SecurityGroupIds:
        - !GetAtt WebAppSG.GroupId
        SubnetId: !Ref SubnetId2
        Tags:
        - Key: "Name"
          Value: "Web Service Instance 2 - C1"
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            echo "Environment=DB_HOST="${DbHost} | sudo tee -a /lib/systemd/system/flask.service
            echo "Environment=DB_USER="${DbUser} | sudo tee -a /lib/systemd/system/flask.service
            echo "Environment=DB_PASSWORD="${DbPassword} | sudo tee -a /lib/systemd/system/flask.service
            systemctl daemon-reload
            sleep 30
            service flask restart
          
  AppEIP:
    Type: AWS::EC2::EIP
    Properties:
      InstanceId: !Ref AppInstance

  AppLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: c1-web-service-alb
      SecurityGroups:
      - !GetAtt WebAppSG.GroupId
      Subnets:
        - !Ref SubnetId1
        - !Ref SubnetId2

  AppLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref AppTargetGroup
      LoadBalancerArn: !Ref AppLoadBalancer
      Port: 80
      Protocol: HTTP

  AppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /health
      Name: AppTargetGroup
      Port: 5000
      VpcId: !Ref VpcId
      Protocol: HTTP
      Targets:
      - Id: !Ref AppInstance


Outputs:
  InstanceIP:
    Value: !GetAtt AppInstance.PublicDnsName
  ApplicationURL:
    Value: !GetAtt AppLoadBalancer.DNSName
